{"version":3,"sources":["Display.js","App.js","serviceWorker.js","index.js"],"names":["Display","_isEmpty","this","props","decoded","result","_chunk","data","map","e","_sum","binaryRegex","RegExp","width","console","log","decodedData","join","replace","match","byteData","hexData","byte","parseInt","toString","padStart","hexRegex","hexString","style","React","Component","App","state","file","target","files","arrayBuffer","then","buffer","bmp","decode","Buffer","from","setState","className","type","id","onChange","handleFiles","bind","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mXAmCeA,E,iLA5BX,GAAIC,IAASC,KAAKC,MAAMC,SACtB,OAAO,8BAGT,IACMC,EADUC,IAAOJ,KAAKC,MAAMC,QAAQG,KAAM,GACzBC,IAAI,SAAAC,GAAC,OAAgB,IAAZC,IAAKD,GAAW,EAAI,IAC9CE,EAAc,IAAIC,OAAJ,YAAgBV,KAAKC,MAAMC,QAAQS,MAAnC,KAA6C,KACjEC,QAAQC,IAAIb,KAAKC,MAAMC,QAAQS,MAAOF,GACtC,IAAMK,EAAcX,EAAOY,KAAK,IAAIC,QAAQP,EAAa,SAACQ,GAAW,MAAM,GAAN,OAAUA,EAAV,QAE/DC,EAAWd,IAAOD,EAAQ,GAEhCS,QAAQC,IAAIK,GAEZ,IAAMC,EAAUD,EAASZ,IAAI,SAAAc,GAAI,OAAIC,SAASD,EAAKL,KAAK,IAAK,KAAIT,IAAI,SAAAC,GAAC,OAAIA,EAAEe,SAAS,IAAIC,SAAS,EAAG,OAE/FC,EAAW,IAAId,OAAJ,YAAgBV,KAAKC,MAAMC,QAAQS,MAAQ,EAA3C,KAAiD,KAC5Dc,EAAYN,EAAQJ,KAAK,IAAIC,QAAQQ,EAAU,SAACP,GAAD,gBAAcA,EAAd,QAErD,OACE,6BACE,yBAAKS,MAAO,CAAC,YAAa,QAASZ,GACnC,6BAAMW,Q,GAxBQE,IAAMC,WCqCbC,E,YAjCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACX5B,QAAS,IAHC,E,yEAOFK,GAAI,IAAD,OACTL,EAAU,GACR6B,EAAOxB,EAAEyB,OAAOC,MAAM,GAC5BrB,QAAQC,IAAIkB,GACZA,EAAKG,cAAcC,KAAK,SAAAC,GACtBlC,EAAUmC,IAAIC,OAAOC,SAAOC,KAAKJ,IAEjCxB,QAAQC,IAAIX,GAEZ,EAAKuC,SAAS,CAACvC,QAASA,Q,+BAM1B,OACE,yBAAKwC,UAAU,OACb,2BAAOC,KAAK,OAAOC,GAAG,QAAQC,SAAU7C,KAAK8C,YAAYC,KAAK/C,QAG9D,kBAAC,EAAD,CAASE,QAASF,KAAK8B,MAAM5B,e,GA5BnByB,IAAMC,WCIJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlC,MACvB,2DCZNmC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.5f7a6792.chunk.js","sourcesContent":["import React from 'react';\nimport _chunk from 'lodash/chunk';\nimport _sum from 'lodash/sum';\nimport _isEmpty from 'lodash/isEmpty';\n\nclass Display extends React.Component {\n  render() {\n    if (_isEmpty(this.props.decoded)) {\n      return <div />;\n    }\n\n    const chunked = _chunk(this.props.decoded.data, 4);\n    const result = chunked.map(e => _sum(e) === 0 ? 0 : 1);\n    const binaryRegex = new RegExp(`.{${this.props.decoded.width}}`, 'g');\n    console.log(this.props.decoded.width, binaryRegex);\n    const decodedData = result.join('').replace(binaryRegex, (match) => {return `${match}\\n`;});\n\n    const byteData = _chunk(result, 8);\n\n    console.log(byteData);\n\n    const hexData = byteData.map(byte => parseInt(byte.join(''), 2)).map(e => e.toString(16).padStart(2, '0'));\n\n    const hexRegex = new RegExp(`.{${this.props.decoded.width / 4}}`, 'g');\n    const hexString = hexData.join('').replace(hexRegex, (match) => `${match}\\n`);\n\n    return (\n      <div>\n        <pre style={{'font-size': '6px'}}>{decodedData}</pre>\n        <pre>{hexString}</pre>\n      </div>\n    );\n  }\n}\n\nexport default Display;\n","import React from 'react';\nimport {Buffer} from 'buffer';\nimport './App.css';\nimport bmp from 'bmp-js';\n\nimport Display from './Display';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      decoded: {}\n    };\n  }\n\n  handleFiles(e) {\n    let decoded = {};\n    const file = e.target.files[0];\n    console.log(file);\n    file.arrayBuffer().then(buffer => {\n      decoded = bmp.decode(Buffer.from(buffer));\n\n      console.log(decoded);\n\n      this.setState({decoded: decoded});\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"file\" id=\"input\" onChange={this.handleFiles.bind(this)}/>\n\n\n        <Display decoded={this.state.decoded}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}