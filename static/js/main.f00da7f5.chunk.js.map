{"version":3,"sources":["Display.js","App.js","serviceWorker.js","index.js"],"names":["Display","_isEmpty","this","props","decoded","data","slice","reverse","flipVertical","width","chunked","_chunk","_flatten","result","map","e","bit","_sum","flipBits","binaryRegex","RegExp","console","log","decodedData","join","replace","match","byteData","hexData","byte","parseInt","toString","toUpperCase","padStart","hexRegex","hexString","style","height","React","Component","App","state","error","file","target","files","arrayBuffer","then","buffer","bmp","decode","Buffer","from","setState","catch","className","type","id","onChange","handleFiles","bind","onClick","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f00da7f5.chunk.js","sourcesContent":["import React from 'react';\nimport _chunk from 'lodash/chunk';\nimport _sum from 'lodash/sum';\nimport _isEmpty from 'lodash/isEmpty';\nimport _flatten from 'lodash/flatten';\n\nfunction flipVertical(data, width) {\n  let chunked = _chunk(data, width * 4);\n  return _flatten([...chunked].reverse());\n}\n\nclass Display extends React.Component {\n  render() {\n    if (_isEmpty(this.props.decoded)) {\n      return <div />;\n    }\n\n\n    let data = this.props.decoded.data.slice();\n    if (this.props.reverse) {\n      data = [...data].reverse();\n    }\n\n    if (this.props.flipVertical) {\n      data = flipVertical(data, this.props.decoded.width);\n    }\n\n    const chunked = _chunk(data, 4);\n    const result = chunked.map(e => {\n      let bit = _sum(e) === 0 ? 0 : 1;\n      if (this.props.flipBits) {\n        bit = bit === 0 ? 1 : 0;\n      }\n      return bit;\n    });\n    const binaryRegex = new RegExp(`.{${this.props.decoded.width}}`, 'g');\n    console.log(this.props.decoded.width, binaryRegex);\n    const decodedData = result.join('').replace(binaryRegex, (match) => {return `${match}\\n`;});\n\n    const byteData = _chunk(result, 8);\n\n    console.log(byteData);\n\n    const hexData = byteData.map(byte => parseInt(byte.join(''), 2)).map(e => e.toString(16).toUpperCase().padStart(2, '0'));\n\n    const hexRegex = new RegExp(`.{${this.props.decoded.width / 4}}`, 'g');\n    const hexString = hexData.join('').replace(hexRegex, (match) => `${match}\\n`);\n\n    return (\n      <div>\n        <pre style={{'fontSize': '6px'}}>{decodedData}</pre>\n        <pre>{hexString}</pre>\n        <ul>\n          <li>Width: {this.props.decoded.width}</li>\n          <li>Height: {this.props.decoded.height}</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Display;\n","import React from 'react';\nimport {Buffer} from 'buffer';\nimport './App.css';\nimport bmp from 'bmp-js';\n\nimport Display from './Display';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      decoded: {},\n      flipBits: false,\n      reverse: false,\n      flipVertical: false,\n      error: null\n    };\n  }\n\n  handleFiles(e) {\n    let decoded = {};\n    const file = e.target.files[0];\n    console.log(file);\n    file.arrayBuffer().then(buffer => {\n      decoded = bmp.decode(Buffer.from(buffer));\n\n      console.log(decoded);\n\n      this.setState({decoded: decoded, error: null});\n    }).catch(e => {\n      this.setState({error: e});\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"file\" id=\"input\" onChange={this.handleFiles.bind(this)}/>\n        <button onClick={() => this.setState({flipBits: !this.state.flipBits})}>Flip Bits: {this.state.flipBits.toString()}</button>\n        <button onClick={() => this.setState({reverse: !this.state.reverse})}>Reverse: {this.state.reverse.toString()}</button>\n        <button onClick={() => this.setState({flipVertical: !this.state.flipVertical})}>Flip Vertical: {this.state.flipVertical.toString()}</button>\n        <button onClick={() => this.setState({reverse: false, flipBits: false, flipVertical: false})}>Reset</button>\n        <div>{this.state.error ? this.state.error.toString() : ''}</div>\n\n\n        <Display decoded={this.state.decoded} flipBits={this.state.flipBits} reverse={this.state.reverse} flipVertical={this.state.flipVertical}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}